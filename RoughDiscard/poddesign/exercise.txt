1. Create 3 pods with names nginx1,nginx2,nginx3. All of them should have the label app=v1
for i in `seq 1 3`;do k run nginx$i --image=nginx -l app=v1;done

2. Show all labels of the pods
k get po --show-labels

3. Change the labels of pod 'nginx2' to be app=v2
k label po nginx2 app=v2 --overwrite

4. Get the label 'app' for the pods (show a column with APP labels)
k get po --L app
k get po --label-columns=app

5. Get only the 'app=v2' pods
k get po -l app=v2
k get po -l 'app in (v2)'
k get po --selector=app=v2

6. Add a new label tier=web to all pods having 'app=v2' or 'app=v1' labels
k label po -l 'app in (v1,v2)' tier=web

7. Add an annotation 'owner: marketing' to all pods having 'app=v2' label
k annotate po -l 'app in (v2)' owner=marketing

8. Remove the 'app' label from the pods we created before
k label po -l app app-

9. Annotate pods nginx1, nginx2, nginx3 with "description='my description'" value
k annotate po nginx{1..3} description=mydescription

10. Check the annotations for pod nginx1
k annotate po nginx1 --list
kubectl describe po nginx1 | grep -i 'annotations'

11. Remove the annotations for these three pods
k annotate po nginx{1..3} description- owner-

12. Remove these pods to have a clean state in your cluster
kubectl delete po nginx{1..3}

13. Create a pod that will be deployed to a Node that has the label 'accelerator=nvidia-tesla-p100'

14. Taint a node with key tier and value frontend with the effect NoSchedule. Then, create a pod that tolerates this taint.

15. Create a pod that will be placed on node controlplane. Use nodeSelector and tolerations.

16. Create a deployment with image nginx:1.18.0, called nginx, having 2 replicas, defining 
port 80 as the port that this container exposes (don't create a service for this deployment)
k create deploy nginx --image=nginx:1.18.0 --port=80 --replicas=2  --dry-run=client -o yaml> deploy.yaml

17. Check how the deployment rollout is going
rollout status deploy nginx

18. Update the nginx image to nginx:1.19.8
k set image deploy nginx nginx=nginx:1.19.8
k edit deploy nginx 

19. Check the rollout history and confirm that the replicas are OK
k rollout history deploy nginx

20. Undo the latest rollout and verify that new pods have the old image (nginx:1.18.0)
k rollout undo deploy nginx

21. Do an on-purpose update of the deployment with a wrong image nginx:1.91
k set image deploy nginx nginx=nginx:1.91

22. Verify that something's wrong with the rollout


23. Return the deployment to the second revision (number 2) and verify the image is nginx:1.19.8
k rollout undo deploy nginx --to-revision=2

24. Scale the deployment to 5 replicas
k scale deploy nginx --replicas=5

25. Autoscale the deployment, pods between 5 and 10, targeting CPU utilization at 80%
k scale deploy nginx --replicas=3

26. Pause the rollout of the deployment
k rollout pause deploy nginx

27. Update the image to nginx:1.19.9 and check that there's nothing going on, since we paused the rollout
k rollout history deploy nginx

28. Resume the rollout and check that the nginx:1.19.9 image has been applied
k rollout history deploy nginx

29. Delete the deployment and the horizontal pod autoscaler you created
k delete deploy/nginx hpa/nginx

30. Implement canary deployment by running two instances of nginx marked as version=v1 and version=v2 so that the load is balanced at 75%-25% ratio

TO Do

31. Create a job named pi with image perl:5.34 that runs the command with arguments "perl -Mbignum=bpi -wle 'print bpi(2000)'"

32. Create a job with the image busybox that executes the command 'echo hello;sleep 30;echo world'

33. Create a job but ensure that it will be automatically terminated by kubernetes if it takes more than 30 seconds to execute
Create the same job, make it run 5 times, one after the other. Verify its status and delete it. Create the same job, but make it run 5 parallel times

34. Create a cron job with image busybox that runs on a schedule of "*/1 * * * *" and writes 
'date; echo Hello from the Kubernetes cluster' to standard output

The cron job should be terminated if it takes more than 17 seconds to start execution after its scheduled time (i.e. the job missed its scheduled time).

Add cronjob.spec.startingDeadlineSeconds=17
The cron job should be terminated if it successfully starts but takes more than 12 seconds to complete execution.
Add cronjob.spec.jobTemplate.spec.activeDeadlineSeconds=12


35. Create a job from cronjob.
kubectl create job --from=cronjob/sample-cron-job sample-job

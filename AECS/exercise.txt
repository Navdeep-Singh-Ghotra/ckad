Application environment configuration and security exercise for CKAD

1. You decide to manage a MongoDB installation in Kubernetes with the help of the official community operator.(https://github.com/mongodb/mongodb-kubernetes-operator) 
This operator provides a CRD. After installing the operator, you will interact with the CRD.

kubectl apply -f https://raw.githubusercontent.com/mongodb/\
mongodb-kubernetes-operator/master/config/crd/bases/mongodbcommunity.\
mongodb.com_mongodbcommunity.yaml

k get crds 
mongodbcommunity.mongodbcommunity.mongodb.com 

Navigate to the directory app-a/ch16/mongodb-operator of the checked-out GitHub repository bmuschko/ckad-study-guide. 
Install the operator using the following command: kubectl apply -f mongodbcommunity.mongodb.com_mongodbâ€‹community.yaml.

List all CRDs using the appropriate kubectl command. Can you identify the CRD that was installed by the installation procedure?

Inspect the schema of the CRD. What are the type and property names of this CRD?


2. As an application developer, you may want to install Kubernetes functionality that extends the platform using the Kubernetes operator pattern. 
The objective of this exercise is to familiarize yourself with creating and managing CRDs. You will not need to write a controller.

Create a CRD resource named backup.example.com with the following specifications:

Group: example.com

Version: v1

Kind: Backup

Singular: backup

Plural: backups

Properties of type string: cronExpression, podName, path

Retrieve the details for the Backup custom resource created in the previous step.

Create a custom object named nginx-backup for the CRD. Provide the following property values:

cronExpression: 0 0 * * *

podName: nginx

path: /usr/local/nginx

Retrieve the details for the nginx-backup object created in the previous step.



3. The premise of this exercise is to create a new user and add her to the kubeconfig file. You will then define a context that uses the user, 
switch to the context, and execute a kubectl command.

Create a certificate for a user named mary. Do not provide any permissions to the user.

Add the user to the kubeconfig file. Define the context named mary-context that assigns the user to a cluster already available in the kubeconfig file.

Set the currently selected context to mary-context. Create a Pod using kubectl. What result do you expect to see?

cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: myuser
spec:
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZEQ0NBVHdDQVFBd0R6RU5NQXNHQTFVRUF3d0ViV0Z5ZVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUpPczNYMGdVQ2hsMG03cXE3YTFPYzVFOSt1L2J4QkxTZUxtSGtpQnRrdWltQjJPCmNMYzJTNmtjdUxUekJielkrOVZDNjM1K2hvZGdPb2J3ZlN3RzBaZDRlUzJjRGRDclJlejM1bGR6V0FMQUs3bm0KY21LQ05tcVVKY2w3YkVhZWNOMmNySElBZWdPaGd4MnAwUXpjTHdub3JOY3ZpTXNpQ2ZZK0lFUUVocFhnQTRoRQo0SHdUUFl3SkhnUnRzWlczK290V3pINFNTcDM4aGhoaTJlMVU3OE1mYTF4dHNFU3ZMdHRLY2VuOUFRb3plZkNGCllmOWNxaks3R09IcnpOQnJNYTFBUkk3UEo0Y2d5Z2dxbmpFdkUrL2pEeWU4TjA4cVFPaGxyNjJpL2g4MUU3RVMKTWZGcmtlNGxoZ2JkYWpSU0NsREtxbXFJWUhabzlxM0lrcmNqbFRVQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQXBSV0Z1M0tKdm0vZTMvSFNwVllhRHVmQmU3VVFHa1ErbGd6d0pxUXJzMjlrUlJONFgrczQ1Cm02dmY2ZUhua2V2cnh0ZThjNzdJMnBENzVLMTNrWkhvd0I3M1hOSXcvL3U1T2J6clYxdU1manowQVZWQXNDS0wKanRzSmlQSkoyVFhLWElUWGtnWWo4emtjOHVSM2ErUXZvZDBJWWRkOFpRbHdKdkhMVkl1UFBtUGx1R0dobHJYegpadFl4YVRvWjJCOGVjKytBS0szSVJqUDZReFh1QUh6QjRoT1NlaHJXVTNWc05EWkQxWU9rVDdBMEVTc29RUWhsCkEvQnNRQmdQNFE0K2V6TnAzSStsYm1YU3VwZzR6cERtcDJGZnVYd293Z2xFbUJ0YVJlYlE5c3dqNTRFTlg4b1kKSTdMbXJCNkNodW92Yi9KcjY5M3VxQTUyWkEwUGExbm0KLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400  # one day
  usages:
  - client auth
EOF


